apply plugin: 'maven-publish'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'signing'

["SONATYPE_NEXUS_USERNAME", "SONATYPE_NEXUS_PASSWORD"].each {
    checkAndDefaultProperty(it)
}

["signing.keyId", "signing.password", "signing.secretKeyRingFile"].each {
    checkProperty(it)
}

def checkAndDefaultProperty(prop) {
    if (!project.hasProperty(prop)) {
        checkProperty(prop)
        rootProject.ext.set(prop, prop)
    }
}

def checkProperty(prop) {
    if (!project.hasProperty(prop)) {
        logger.warn("Add " + prop + " to your ~/.gradle/gradle.properties file.")
    }
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}


def isAndroid = getPlugins().hasPlugin('com.android.library')
def component = isAndroid ? components.android : components.java
if (isAndroid) {

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.sourceFiles
        classifier 'sources'
    }

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task javadocJar(type: Jar, dependsOn: androidJavadoc) {
        from androidJavadoc
        classifier = 'javadoc'
    }
} else {

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier 'javadoc'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from component
            artifact sourcesJar
            artifact javadocJar

            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name 'snapshot'
            url getSnapshotRepositoryUrl()
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }

        maven {
            name 'release'
            url getReleaseRepositoryUrl()
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    required { isReleaseBuild() }
    sign publishing.publications.maven
}


publishMavenPublicationToReleaseRepository.doFirst {
    if (!isReleaseBuild()) {
        throw new GradleException("Release build version should not end with 'SNAPSHOT'.")
    }
}

publishMavenPublicationToSnapshotRepository.doFirst {
    if (isReleaseBuild()) {
        throw new GradleException("Snapshot build version should end with 'SNAPSHOT'.")
    }
}